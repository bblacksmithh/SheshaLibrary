/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';
export const SPEC_VERSION = 'v1';
export interface ReferenceListItemValueDto {
  item?: string | null;
  itemValue?: number | null;
}

export interface GuidNullableEntityWithDisplayNameDto {
  id?: string | null;
  displayText?: string | null;
}

export interface CreatePersonAccountDto {
  userName: string;
  password: string;
  passwordConfirmation: string;
  firstName: string;
  lastName: string;
  mobileNumber?: string | null;
  emailAddress: string;
  isContractor?: boolean;
  typeOfAccount?: ReferenceListItemValueDto;
  primaryOrganisation?: GuidNullableEntityWithDisplayNameDto;
}

export interface PersonAccountDto {
  id?: string;
  userName: string;
  firstName: string;
  lastName: string;
  mobileNumber?: string | null;
  emailAddress: string;
  isContractor?: boolean;
  primaryOrganisation?: GuidNullableEntityWithDisplayNameDto;
  typeOfAccount?: ReferenceListItemValueDto;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface PersonAccountDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: PersonAccountDto;
}

export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface AutocompleteItemDto {
  value?: string | null;
  displayText?: string | null;
}

export interface AutocompleteItemDtoListAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: AutocompleteItemDto[] | null;
}

export interface PersonAccountDtoPagedResultDto {
  items?: PersonAccountDto[] | null;
  totalCount?: number;
}

export interface PersonAccountDtoPagedResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: PersonAccountDtoPagedResultDto;
}

export interface PersonCreateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type PersonCreateProps = Omit<
  MutateProps<PersonAccountDtoAjaxResponse, AjaxResponseBase, PersonCreateQueryParams, CreatePersonAccountDto, void>,
  'path' | 'verb'
>;

export const PersonCreate = (props: PersonCreateProps) => (
  <Mutate<PersonAccountDtoAjaxResponse, AjaxResponseBase, PersonCreateQueryParams, CreatePersonAccountDto, void>
    verb="POST"
    path={`/api/services/app/Person/Create`}
    {...props}
  />
);

export type UsePersonCreateProps = Omit<
  UseMutateProps<PersonAccountDtoAjaxResponse, AjaxResponseBase, PersonCreateQueryParams, CreatePersonAccountDto, void>,
  'path' | 'verb'
>;

export const usePersonCreate = (props: UsePersonCreateProps) =>
  useMutate<PersonAccountDtoAjaxResponse, AjaxResponseBase, PersonCreateQueryParams, CreatePersonAccountDto, void>(
    'POST',
    `/api/services/app/Person/Create`,
    props
  );

export interface PersonAutocompleteByNameQueryParams {
  term?: string | null;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type PersonAutocompleteByNameProps = Omit<
  GetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, PersonAutocompleteByNameQueryParams, void>,
  'path'
>;

export const PersonAutocompleteByName = (props: PersonAutocompleteByNameProps) => (
  <Get<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, PersonAutocompleteByNameQueryParams, void>
    path={`/api/services/app/Person/AutocompleteByName`}
    {...props}
  />
);

export type UsePersonAutocompleteByNameProps = Omit<
  UseGetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, PersonAutocompleteByNameQueryParams, void>,
  'path'
>;

export const usePersonAutocompleteByName = (props: UsePersonAutocompleteByNameProps) =>
  useGet<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, PersonAutocompleteByNameQueryParams, void>(
    `/api/services/app/Person/AutocompleteByName`,
    props
  );

export interface PersonAutocompleteByRoleQueryParams {
  term?: string | null;
  role?: string | null;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type PersonAutocompleteByRoleProps = Omit<
  GetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, PersonAutocompleteByRoleQueryParams, void>,
  'path'
>;

export const PersonAutocompleteByRole = (props: PersonAutocompleteByRoleProps) => (
  <Get<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, PersonAutocompleteByRoleQueryParams, void>
    path={`/api/services/app/Person/AutocompleteByRole`}
    {...props}
  />
);

export type UsePersonAutocompleteByRoleProps = Omit<
  UseGetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, PersonAutocompleteByRoleQueryParams, void>,
  'path'
>;

export const usePersonAutocompleteByRole = (props: UsePersonAutocompleteByRoleProps) =>
  useGet<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, PersonAutocompleteByRoleQueryParams, void>(
    `/api/services/app/Person/AutocompleteByRole`,
    props
  );

export interface PersonUpdateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type PersonUpdateProps = Omit<
  MutateProps<PersonAccountDtoAjaxResponse, AjaxResponseBase, PersonUpdateQueryParams, PersonAccountDto, void>,
  'path' | 'verb'
>;

export const PersonUpdate = (props: PersonUpdateProps) => (
  <Mutate<PersonAccountDtoAjaxResponse, AjaxResponseBase, PersonUpdateQueryParams, PersonAccountDto, void>
    verb="PUT"
    path={`/api/services/app/Person/Update`}
    {...props}
  />
);

export type UsePersonUpdateProps = Omit<
  UseMutateProps<PersonAccountDtoAjaxResponse, AjaxResponseBase, PersonUpdateQueryParams, PersonAccountDto, void>,
  'path' | 'verb'
>;

export const usePersonUpdate = (props: UsePersonUpdateProps) =>
  useMutate<PersonAccountDtoAjaxResponse, AjaxResponseBase, PersonUpdateQueryParams, PersonAccountDto, void>(
    'PUT',
    `/api/services/app/Person/Update`,
    props
  );

export interface PersonGetQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type PersonGetProps = Omit<
  GetProps<PersonAccountDtoAjaxResponse, AjaxResponseBase, PersonGetQueryParams, void>,
  'path'
>;

export const PersonGet = (props: PersonGetProps) => (
  <Get<PersonAccountDtoAjaxResponse, AjaxResponseBase, PersonGetQueryParams, void>
    path={`/api/services/app/Person/Get`}
    {...props}
  />
);

export type UsePersonGetProps = Omit<
  UseGetProps<PersonAccountDtoAjaxResponse, AjaxResponseBase, PersonGetQueryParams, void>,
  'path'
>;

export const usePersonGet = (props: UsePersonGetProps) =>
  useGet<PersonAccountDtoAjaxResponse, AjaxResponseBase, PersonGetQueryParams, void>(
    `/api/services/app/Person/Get`,
    props
  );

export interface PersonGetAllQueryParams {
  sorting?: string | null;
  skipCount?: number;
  maxResultCount?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type PersonGetAllProps = Omit<
  GetProps<PersonAccountDtoPagedResultDtoAjaxResponse, AjaxResponseBase, PersonGetAllQueryParams, void>,
  'path'
>;

export const PersonGetAll = (props: PersonGetAllProps) => (
  <Get<PersonAccountDtoPagedResultDtoAjaxResponse, AjaxResponseBase, PersonGetAllQueryParams, void>
    path={`/api/services/app/Person/GetAll`}
    {...props}
  />
);

export type UsePersonGetAllProps = Omit<
  UseGetProps<PersonAccountDtoPagedResultDtoAjaxResponse, AjaxResponseBase, PersonGetAllQueryParams, void>,
  'path'
>;

export const usePersonGetAll = (props: UsePersonGetAllProps) =>
  useGet<PersonAccountDtoPagedResultDtoAjaxResponse, AjaxResponseBase, PersonGetAllQueryParams, void>(
    `/api/services/app/Person/GetAll`,
    props
  );

export interface PersonDeleteQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type PersonDeleteProps = Omit<MutateProps<void, unknown, PersonDeleteQueryParams, void, void>, 'path' | 'verb'>;

export const PersonDelete = (props: PersonDeleteProps) => (
  <Mutate<void, unknown, PersonDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/services/app/Person/Delete`}
    {...props}
  />
);

export type UsePersonDeleteProps = Omit<
  UseMutateProps<void, unknown, PersonDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const usePersonDelete = (props: UsePersonDeleteProps) =>
  useMutate<void, unknown, PersonDeleteQueryParams, void, void>('DELETE', `/api/services/app/Person/Delete`, {
    ...props,
  });
